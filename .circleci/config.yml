version: 2
workflows:
  version: 2
  all_platforms:
    jobs:
    - esp_build
    - nrf52_build
    - stm32_build
    - avr_build
    - x86_build
jobs:
  nrf52_build:
    docker:
      - image: ubuntu:bionic
    steps:
      - checkout
      - run:
          name: Update apt
          command: apt-get update
      - run:
          name: Install unzip wget
          command: apt-get install -y unzip wget ninja-build cmake git
      - run:
          name: Get submodules
          command: git submodule update --init --recursive
      - run:
          name: Download toolchain
          command: wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/8-2018q4/gcc-arm-none-eabi-8-2018-q4-major-linux.tar.bz2
      - run:
          name: Extract toolchain
          command: tar xf gcc-arm-none-eabi-8-2018-q4-major-linux.tar.bz2
      - run:
          name: Move the toolchain
          command: mkdir -p /opt/x-tools/; mv gcc-arm-none-eabi-8-2018-q4-major /opt/x-tools
      - run:
          name: Download nRF52 SDK
          command: wget http://cs.ucsb.edu/~bakir/nRF5_SDK_15.3.0_59ac345.zip -O nrf5-sdk.zip
      - run:
          name: Extract SDK
          command: unzip nrf5-sdk.zip -d /opt/x-tools
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=nrf52/832 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=nrf52/840 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
  stm32_build:
    docker:
      - image: ubuntu:bionic
    steps:
      - checkout
      - run:
          name: Update apt
          command: apt-get update
      - run:
          name: Install unzip wget
          command: apt-get install -y unzip wget ninja-build cmake git
      - run:
          name: Get submodules
          command: git submodule update --init --recursive
      - run:
          name: Download toolchain
          command: wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/8-2018q4/gcc-arm-none-eabi-8-2018-q4-major-linux.tar.bz2
      - run:
          name: Extract toolchain
          command: tar xf gcc-arm-none-eabi-8-2018-q4-major-linux.tar.bz2
      - run:
          name: Move the toolchain
          command: mkdir -p /opt/x-tools/; mv gcc-arm-none-eabi-8-2018-q4-major /opt/x-tools
      - run:
          name: Download libopencm3
          command: wget http://cs.ucsb.edu/~bakir/libopencm3.zip -O libopencm3.zip
      - run:
          name: Extract libopencm3
          command: unzip libopencm3.zip -d /opt/x-tools
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=stm32/f1/03c8 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=stm32/f7/46 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=stm32/l0/53 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
      - run:
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_CPU=stm32/l4/75 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
  x86_build:
    docker:
      - image: ubuntu:bionic
    steps:
      - checkout
      - run:
          name: Update apt
          command: apt-get update
      - run:
          name: Install Toolchain
          command: apt-get install -y g++-7 cmake ninja-build git libboost-all-dev
      - run:
          name: Get submodules
          command: git submodule update --init --recursive
      - run:
          environment:
            CXX: g++-7
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_BOARD=hosted/x86 ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
      - run:
          working_directory: build/
          name: Run Tests
          command: ninja test
  avr_build:
    docker:
      - image: ubuntu:bionic
    steps:
      - checkout
      - run:
          name: Update apt
          command: apt-get update
      - run:
          name: Install Toolchain
          command: apt-get install -y gcc-avr cmake ninja-build avr-libc git
      - run:
          name: Get submodules
          command: git submodule update --init --recursive
      - run:
          environment:
            CXX: avr-g++
            CC: avr-gcc
          name: Generate Project
          command: mkdir build && cd build && cmake -G Ninja -DTOS_BOARD=arduino/pro-mini-8 .. && cmake ..
      - run:
          working_directory: build/
          name: Build Project
          command: ninja
  esp_build:
    docker:
    - image: ubuntu:bionic
    steps:
    - checkout
    - run:
        name: Update apt
        command: apt-get update
    - run:
        name: Install unzip wget
        command: apt-get install -y unzip wget bzip2 tar ninja-build cmake git
    - run:
        name: Get submodules
        command: git submodule update --init --recursive
    - run:
        name: Download toolchain
        command: wget http://cs.ucsb.edu/~bakir/esp-tos-sdk.tar.bz2
    - run:
        name: Create toolchain dir
        command: mkdir -p /opt/x-tools/tos-esp-sdk
    - run:
        name: Extract toolchain
        command: tar xf esp-tos-sdk.tar.bz2 -C /opt/x-tools/tos-esp-sdk
    - run:
        name: Generate Project
        command: mkdir build && cd build && cmake -G Ninja -DTOS_BOARD=nodemcu -DCMAKE_BUILD_TYPE=MinSizeRel ..
    - run:
        working_directory: build/
        name: Build Project
        command: ninja
