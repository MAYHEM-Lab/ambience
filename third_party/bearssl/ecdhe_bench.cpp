extern "C" {
#include "src/src/inner.h"
}

#include <bearssl_ec.h>
#include <bearssl_block.h>
#include <tos/debug/debug.hpp>
#include <tos/allocator/free_list.hpp>
#include <tos/ubench/bench.hpp>
#include <tos/ubench/state.hpp>

namespace {
void BM_BRSSL_DHE(tos::bench::any_state& state) {
    uint8_t base[] = {2};

    uint8_t exp[] = {1, 2, 3, 4, 1, 2, 3, 4};

    uint8_t mod[] = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2, 0x21,
        0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b, 0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02,
        0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b,
        0x22, 0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95, 0x19, 0xb3,
        0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d, 0xf2, 0x5f, 0x14, 0x37, 0x4f,
        0xe1, 0x35, 0x6d, 0x6d, 0x51, 0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e,
        0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c,
        0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb, 0x5a, 0x89, 0x9f, 0xa5,
        0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec,
        0xe4, 0x5b, 0x3d, 0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,
        0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8, 0xfd, 0x24, 0xcf,
        0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3, 0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56,
        0x20, 0x85, 0x52, 0xbb, 0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67,
        0x0c, 0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08, 0xca, 0x18,
        0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36, 0xce, 0x3b, 0xe3, 0x9e, 0x77,
        0x2c, 0x18, 0x0e, 0x86, 0x03, 0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f,
        0xb5, 0xc5, 0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6, 0x95,
        0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95, 0x6a, 0xe5, 0x15, 0xd2,
        0x26, 0x18, 0x98, 0xfa, 0x05, 0x10, 0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4,
        0x2d, 0xad, 0x33, 0x17, 0x0d, 0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab,
        0xdf, 0x1c, 0xba, 0x64, 0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb, 0xef, 0x0a, 0x8a,
        0xea, 0x71, 0x57, 0x5d, 0x06, 0x0c, 0x7d, 0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1,
        0xe4, 0xc7, 0xab, 0xf5, 0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94,
        0xe0, 0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2, 0xee, 0x6b,
        0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64, 0xd8, 0x76, 0x02, 0x73, 0x3e,
        0xc8, 0x6a, 0x64, 0x52, 0x1f, 0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c, 0xbb, 0xe1,
        0x17, 0x57, 0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0, 0xba, 0xd9, 0x46,
        0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31, 0x43, 0xdb, 0x5b, 0xfc,
        0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82, 0xd1, 0x20, 0xa9, 0x3a, 0xd2, 0xca, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

    for (auto _ : state) {
        uint32_t mod_arr[1000];
        br_i31_decode(mod_arr, mod, sizeof mod);

        uint32_t base_arr[1000];
        br_i31_decode_mod(base_arr, base, sizeof base, mod_arr);

        uint32_t tmp1[1000];
        uint32_t tmp2[1000];

        br_i31_modpow(
            base_arr, exp, sizeof exp, mod_arr, br_i31_ninv31(mod_arr[1]), tmp1, tmp2);

        tos::debug::do_not_optimize(base_arr);
    }
}

void BM_BRSSL_HMAC_SHA256(tos::bench::any_state& state) {
    auto& hash = br_sha256_vtable;

    uint8_t key[] = "sekret";


    for (auto _ : state) {
        br_hmac_key_context key_ctx;
        br_hmac_key_init(&key_ctx, &hash, key, sizeof key);

        br_hmac_context hmac_ctx;
        br_hmac_init(&hmac_ctx, &key_ctx, 0);
        char buf[] = "hello world";

        br_hmac_update(&hmac_ctx, buf, sizeof buf);

        uint8_t res[32];
        br_hmac_out(&hmac_ctx, res);
        tos::debug::do_not_optimize(res);
    }
}

void BM_BRSSL_ECDHE(tos::bench::any_state& state) {
    uint8_t exp[] = {1, 2, 3, 4, 1, 2, 3, 4};
    uint8_t exp2[] = {4, 3, 2, 1, 4, 3, 2, 1};
    auto& ec = br_ec_c25519_m31;
    unsigned char out[128];

    for (auto _ : state) {
        auto len = ec.mulgen(out, exp, sizeof exp, BR_EC_curve25519);
        auto sec = ec.mul(out, len, exp2, sizeof exp2, BR_EC_curve25519);
        tos::debug::do_not_optimize(sec);
    }
}

unsigned char sig[64];
void BM_BRSSL_ECDSA_V(tos::bench::any_state& state) {
    auto& ec = br_ec_p256_m31;

    unsigned char key[32] = {1, 2, 3, 4};

    br_ec_private_key pk;
    pk.curve = BR_EC_secp256r1;
    pk.x = key;
    pk.xlen = 32;

    unsigned char pubkey[64];
    br_ec_public_key pubk;
    br_ec_compute_pub(&ec, &pubk, pubkey, &pk);

    unsigned char x[32] = {3, 4, 5, 6};

    br_sha256_context ctx;
    br_sha256_init(&ctx);
    br_sha256_update(&ctx, x, 32);

    unsigned char hash[32];
    br_sha256_out(&ctx, hash);

    for (auto _ : state) {
        LOG(tos::span(hash), tos::span(sig));
        auto ver_res = br_ecdsa_i31_vrfy_raw(&ec, hash, 32, &pubk, sig, 64);
        LOG(bool(ver_res));
        tos::debug::do_not_optimize(sig);
    }
}

void BM_BRSSL_ECDSA_S(tos::bench::any_state& state) {
    auto& ec = br_ec_p256_m31;

    unsigned char key[32] = {1, 2, 3, 4};

    br_ec_private_key pk;
    pk.curve = BR_EC_secp256r1;
    pk.x = key;
    pk.xlen = 32;

    auto& hash_class = br_sha256_vtable;

    unsigned char x[32] = {3, 4, 5, 6};

    br_sha256_context ctx;
    br_sha256_init(&ctx);
    br_sha256_update(&ctx, x, 32);

    unsigned char hash[32];
    br_sha256_out(&ctx, hash);

    for (auto _ : state) {
        auto len = br_ecdsa_i31_sign_raw(&ec, &hash_class, hash, &pk, sig);
        LOG(tos::span(hash), tos::span(sig));
        LOG(len);
        tos::debug::do_not_optimize(sig);
    }
}

void BM_BRSSL_AES_CTR(tos::bench::any_state& state) {
    uint8_t data[64] = "foobar";

    constexpr uint8_t key[16] = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
    uint8_t iv[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

    br_aes_ct_ctr_keys keys;
    br_aes_ct_ctr_init(&keys, key, sizeof key);

    for (auto _ : state) {
        uint32_t cc = 0x12345678;
        for (int i = 0; i < 4; ++i) {
            auto d = tos::span(data).slice(i * 16, 16);
            cc = br_aes_ct_ctr_run(&keys, iv, cc, d.data(), d.size());
            tos::debug::do_not_optimize(data);
        }
    }
}

//BENCHMARK(BM_BRSSL_DHE);
BENCHMARK(BM_BRSSL_HMAC_SHA256);
BENCHMARK(BM_BRSSL_ECDHE);
BENCHMARK(BM_BRSSL_ECDSA_S);
BENCHMARK(BM_BRSSL_ECDSA_V);
BENCHMARK(BM_BRSSL_AES_CTR);
} // namespace