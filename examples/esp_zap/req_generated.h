// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQ_BB_CLOUD_H_
#define FLATBUFFERS_GENERATED_REQ_BB_CLOUD_H_

#include "flatbuffers/flatbuffers.h"

namespace zap {
namespace cloud {

struct Request;

inline const flatbuffers::TypeTable *RequestTypeTable();

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RequestTypeTable();
  }
  enum {
    VT_TOKEN = 4,
    VT_HANDLER = 6,
    VT_BODY = 8
  };
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  const flatbuffers::String *handler() const {
    return GetPointer<const flatbuffers::String *>(VT_HANDLER);
  }
  const flatbuffers::Vector<uint8_t> *body() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BODY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           VerifyOffset(verifier, VT_HANDLER) &&
           verifier.VerifyString(handler()) &&
           VerifyOffset(verifier, VT_BODY) &&
           verifier.VerifyVector(body()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(Request::VT_TOKEN, token);
  }
  void add_handler(flatbuffers::Offset<flatbuffers::String> handler) {
    fbb_.AddOffset(Request::VT_HANDLER, handler);
  }
  void add_body(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body) {
    fbb_.AddOffset(Request::VT_BODY, body);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> token = 0,
    flatbuffers::Offset<flatbuffers::String> handler = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_handler(handler);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<Request> CreateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr,
    const char *handler = nullptr,
    const std::vector<uint8_t> *body = nullptr) {
  return zap::cloud::CreateRequest(
      _fbb,
      token ? _fbb.CreateString(token) : 0,
      handler ? _fbb.CreateString(handler) : 0,
      body ? _fbb.CreateVector<uint8_t>(*body) : 0);
}

inline const flatbuffers::TypeTable *RequestTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const zap::cloud::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<zap::cloud::Request>(buf);
}

inline const zap::cloud::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<zap::cloud::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<zap::cloud::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<zap::cloud::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<zap::cloud::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<zap::cloud::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cloud
}  // namespace bb

#endif  // FLATBUFFERS_GENERATED_REQ_BB_CLOUD_H_
