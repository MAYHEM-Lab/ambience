#!/usr/bin/nickle

# Copyright Â© 2018, Keith Packard
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the copyright holders nor the names of
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

printf ("const dtoa_type __dtoa_scale_up[] = {\n");
for (int i = 1; i <= 65536; i *= 2) {
	printf("#if DTOA_MAX_10_EXP >= %d\n", i);
	printf("\t1e%d,\n", i);
	printf("#endif\n");
}
printf("};\n");

printf ("const dtoa_type __dtoa_scale_down[] = {\n");
for (int i = 1; i <= 65536; i *= 2) {
	printf("#if DTOA_MIN_10_EXP <= -%d\n", i);
	printf("\t1e-%d,\n", i);
	printf("#endif\n");
}
printf("};\n");

printf ("const dtoa_type __dtoa_round[] = {\n");

for (int i = 30; i >= 0; i--) {
	printf("#if DTOA_DIG >= %d\n", i);
	printf("\t5e%d,\n", i);
	printf("#endif\n");
}

printf("};\n");

int j = 0;
for (int i = 1; i <= 65536; i *= 2) {
	printf("#if DTOA_MAX_10_EXP >= %d && DTOA_MAX_10_EXP < %d\n", i, i*2);
	printf("#define DTOA_SCALE_UP_NUM %d\n", j + 1);
	printf("#endif\n");
	j++;
}

int j = 0;
for (int i = 1; i <= 65536; i *= 2) {
	printf("#if DTOA_MIN_10_EXP <= -%d && DTOA_MIN_10_EXP > -%d\n", i, i*2);
	printf ("#define DTOA_SCALE_DOWN_NUM %d\n", j + 1);
	printf("#endif\n");
	j++;
}
